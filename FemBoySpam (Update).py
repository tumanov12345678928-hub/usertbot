from pyrogram import Client, filters
import asyncio
import logging
from pyrogram.types import Message  # –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from pyrogram.enums import ParseMode  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ParseMode
from pyrogram.errors import PeerIdInvalid, UsernameInvalid, UsernameNotOccupied, ChannelPrivate, ChatAdminRequired
import sqlite3
import time
import random
import string
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.types import ChatPermissions

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Client(
    "Osnova",
    api_id=21592124,
    api_hash="c2100f2a2c6beb6af0a98830509f371a",
    test_mode=True,
    plugins=dict(root="plugins")
)





GIFT_IDS = {
    "happy": 5415904913592942593,
    "monkey": 5454418585415843841,
    "love": 5453972608896729089,
    "clown": 5454079300179329025
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
is_sending_active = False
is_private = True


async def send_gifts(client, message, gift_type, target, count, ):
    global is_sending_active
    is_sending_active = True
    is_private = True

    try:
        gift_id = GIFT_IDS[gift_type]

        for _ in range(count):
            if not is_sending_active:
                break
            await client.send_gift(chat_id=target.id, gift_id=gift_id)

        await message.reply(f"‚úÖ –ì–æ—Ç–æ–≤–æ!") if is_sending_active else None

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        is_sending_active = False




@app.on_message(filters.command("nongift", prefixes=".") & filters.me)
async def stop_sending(client, message):
    global is_sending_active
    is_sending_active = False
    await message.reply("‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


@app.on_message(filters.command("happy", prefixes=".") & filters.me)
async def happy_gift(client, message):
    await handle_gift_command(client, message, "happy")


@app.on_message(filters.command("monkey", prefixes=".") & filters.me)
async def monkey_gift(client, message):
    await handle_gift_command(client, message, "monkey")


@app.on_message(filters.command("love", prefixes=".") & filters.me)
async def love_gift(client, message):
    await handle_gift_command(client, message, "love")


@app.on_message(filters.command("clown", prefixes=".") & filters.me)
async def clown_gift(client, message):
    await handle_gift_command(client, message, "clown")


async def handle_gift_command(client, message, gift_type):
    global is_sending_active

    if is_sending_active:
        return await message.reply("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏")

    args = message.text.split()
    if len(args) < 3:
        return await message.reply(f"‚ùå –§–æ—Ä–º–∞—Ç: .{gift_type} @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    try:
        target = await client.get_chat(args[1].strip("@"))
        count = min(int(args[2]), 100000)
        await send_gifts(client, message, gift_type, target, count)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@app.on_message(filters.command("inf", prefixes=".") & (filters.group | filters.channel))  # –í –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö
async def get_group_info(client: Client, message: Message):
    chat = message.chat
    await message.reply_text(
        f"**üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n"
        f"**ID:** `{chat.id}`\n"
        f"**–¢–∏–ø:** `{'–ì—Ä—É–ø–ø–∞' if chat.type == 'group' else '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞' if chat.type == 'supergroup' else '–ö–∞–Ω–∞–ª'}`\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{chat.title}`\n"
        f"**Username:** @{chat.username if chat.username else '–Ω–µ—Ç'}\n"
        f"**–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{chat.members_count if hasattr(chat, 'members_count') else 'N/A'}`"
    )

@app.on_message(filters.command("transfer", ".") & filters.me)
async def transfer_gifts(client, message):
    try:
        if len(message.command) < 3:
            await message.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>.transfer —é–∑–µ—Ä–Ω–µ–π–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>")
            return

        username = message.command[1].lstrip("@")
        try:
            amount = int(message.command[2])
            if amount <= 0:
                await message.edit("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                return
        except ValueError:
            await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤!")
            return

        await message.edit(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–¥–∞—á—É {amount} –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}...")

        transferred = 0
        errors = 0
        async for gift in client.get_chat_gifts("me"):
            if transferred >= amount:
                break

            try:
                result = await gift.transfer(username)
                transferred += 1
            except Exception as e:
                errors += 1
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
                continue

        report = (
            f"üìä –û—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–æ–≤:\n\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount}\n"
            f"‚Ä¢ –ü–µ—Ä–µ–¥–∞–Ω–æ: {transferred}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{username}"
        )

        await message.edit(report)

    except Exception as ex:
        await message.edit(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}")
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ transfer: {ex}")


@app.on_message(filters.command("ban", prefixes=".") & filters.me)
async def ban_cmd(client, message):
    if not message.reply_to_message:
        await message.edit("<b>‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>")
        return

    try:
        await client.ban_chat_member(
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id
        )
        await message.edit("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω</b>")
    except Exception as e:
        await message.edit(f"<b>‚ùå –û—à–∏–±–∫–∞: {e}</b>")






@app.on_message(filters.command("info", prefixes=".") & filters.me)
async def info_cmd(client, message):
    if message.reply_to_message:
        target = message.reply_to_message.from_user
    else:
        target = message.from_user

    text = f"""
<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
ID: <code>{target.id}</code>
–ò–º—è: {target.first_name}
–§–∞–º–∏–ª–∏—è: {target.last_name or '‚ùå'}
–Æ–∑–µ—Ä–Ω–µ–π–º: @{target.username or '‚ùå'}
–ë–æ—Ç: {'‚úÖ' if target.is_bot else '‚ùå'}
"""
    await message.edit(text, parse_mode=ParseMode.HTML)





@app.on_message(filters.command("broadcast", prefixes=".") & filters.me)
async def broadcast_cmd(client, message):
    if len(message.command) < 2:
        await message.edit("<b>‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç</b>")
        return

    text = " ".join(message.command[1:])
    count = 0
    async for dialog in client.get_dialogs():
        try:
            await client.send_message(dialog.chat.id, text)
            count += 1
            await asyncio.sleep(0.1)  # –ê–Ω—Ç–∏—Ñ–ª—É–¥
        except:
            continue

    await message.edit(f"<b>‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ –≤ {count} —á–∞—Ç–æ–≤</b>")


@app.on_message(filters.command("ban", prefixes=".") & filters.me)
async def ban_cmd(client, message):
    if not message.reply_to_message:
        await message.edit("<b>‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>")
        return

    try:
        await client.ban_chat_member(
            chat_id=message.chat.id,
            user_id=message.reply_to_message.from_user.id
        )
        await message.edit("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω</b>")
    except Exception as e:
        await message.edit(f"<b>‚ùå –û—à–∏–±–∫–∞: {e}</b>")


@app.on_message(filters.command("join", prefixes=".") & filters.me)
async def join_cmd(client, message):
    if len(message.command) < 2:
        await message.edit("<b>‚ùå –£–∫–∞–∂–∏—Ç–µ username —á–∞—Ç–∞</b>", parse_mode=ParseMode.HTML)
        return

    username = message.command[1]
    try:
        chat = await client.join_chat(username)
        await message.edit(f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª –≤ {chat.title}</b>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.edit(f"<b>‚ùå –û—à–∏–±–∫–∞: {e}</b>", parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .spam
@app.on_message(filters.command("spam", prefixes=".") & filters.me)
async def spam_command(client: Client, message: Message):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text}")

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        try:
            await message.delete()
        except Exception as del_err:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {del_err}")

        # –†–∞–∑–±–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = message.text.split(maxsplit=3)  # .spam 5 1.0 –¢–µ–∫—Å—Ç...

        if len(args) < 4:
            logger.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤! –ù—É–∂–Ω–æ: .spam [–∫–æ–ª-–≤–æ] [–∑–∞–¥–µ—Ä–∂–∫–∞] [—Ç–µ–∫—Å—Ç]")
            await client.send_message(message.chat.id, "‚ùå **–§–æ—Ä–º–∞—Ç:** `.spam [–∫–æ–ª-–≤–æ] [–∑–∞–¥–µ—Ä–∂–∫–∞] [—Ç–µ–∫—Å—Ç]`")
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        try:
            count = int(args[1])
            delay = float(args[2])
            text = args[3]
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: {e}")
            await client.send_message(message.chat.id,
                                      f"‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã\n–ü—Ä–∏–º–µ—Ä: `.spam 5 1.0 –ü—Ä–∏–≤–µ—Ç`")
            return

        if count <= 0 or delay < 0:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: count={count}, delay={delay}")
            await client.send_message(message.chat.id, "‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ö–æ–ª-–≤–æ > 0, –∑–∞–¥–µ—Ä–∂–∫–∞ ‚â• 0")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º (reply –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ)
        if message.reply_to_message:
            target_chat_id = message.chat.id
            reply_to_msg_id = message.reply_to_message.id  # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (reply_to_msg_id={reply_to_msg_id})")
        else:
            target_chat_id = message.chat.id
            reply_to_msg_id = None  # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—ã—á–Ω—ã–π —á–∞—Ç")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info(f"–°—Ç–∞—Ä—Ç —Å–ø–∞–º–∞: {count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay} —Å–µ–∫")
        for i in range(count):
            try:
                await client.send_message(
                    chat_id=target_chat_id,
                    text=text,
                    reply_to_message_id=reply_to_msg_id  # –ï—Å–ª–∏ –µ—Å—Ç—å reply, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ –Ω–µ–º—É
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {i + 1}/{count} (chat_id={target_chat_id})")
                if i < count - 1:
                    await asyncio.sleep(delay)
            except Exception as send_err:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {send_err}")
                break

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await client.send_message(message.chat.id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞:** `{e}`")








@app.on_message(filters.command("stopspam", prefixes=".") & filters.me)
async def stop_spam(client, message):
    global spam_active
    spam_active = False
    await message.edit("<b>üõë –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>", parse_mode=ParseMode.HTML)
    
    
@app.on_message(filters.command("ping", prefixes=".") & filters.me)
async def ping_cmd(client, message):
    start = time.time()
    msg = await message.reply("üèì")
    end = time.time()
    await msg.edit(f"üèì Pong! –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: <b>{round(end - start, 3)} —Å–µ–∫</b>", parse_mode=ParseMode.HTML)
   
    
      
    
@app.on_message(filters.command("clean", prefixes=".") & filters.me)
async def clean_messages(client, message):
    try:
        count = int(message.command[1])
        messages = [msg.id async for msg in client.get_chat_history(message.chat.id, limit=count + 1)]
        await client.delete_messages(message.chat.id, messages)
    except:
        await message.edit("‚ùå –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    
    
    
    
@app.on_message(filters.command("raid", prefixes=".") & filters.me)
async def raid_mode(client, message):
    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        await message.edit("‚ùå –§–æ—Ä–º–∞—Ç: `.raid [–∫–æ–ª-–≤–æ] [–∑–∞–¥–µ—Ä–∂–∫–∞] [—Ç–µ–∫—Å—Ç]`")
        return

    try:
        count = int(args[1])
        delay = float(args[2])
        text = args[3]
    except:
        await message.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")
        return

    await message.delete()
    previous_msg = await client.send_message(message.chat.id, text)
    for i in range(1, count):
        await asyncio.sleep(delay)
        previous_msg = await client.send_message(
            message.chat.id,
            text,
            reply_to_message_id=previous_msg.id
        )


@app.on_message(filters.command("hack", prefixes=".") & filters.me)
async def hack_cmd(client, message):
    if len(message.command) < 2:
        await message.edit("‚ùå –£–∫–∞–∂–∏ –∫–æ–≥–æ –≤–∑–ª–∞–º—ã–≤–∞—Ç—å\n–ü—Ä–∏–º–µ—Ä: `.hack @clown`")
        return

    target = message.command[1]
    steps = [
        f"üîç –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π {target}...",
        "üß¨ –í–∑–ª–æ–º –æ–±–ª–∞–∫–∞ Google Drive...",
        "üíâ –ò–Ω—ä–µ–∫—Ü–∏—è –≤–∏—Ä—É—Å–∞ Trojan.RAT...",
        "üì° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ backdoor...",
        "üõ¢Ô∏è –°–ª–∏–≤ –ª–æ–≥–æ–≤ Telegram Web...",
        "üìÇ –î–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–ø–∏—Å–∫–∞–º –ø–æ–ª—É—á–µ–Ω...",
        "üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ nudes.zip...",
        "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –§–°–ë...",
        "‚ò†Ô∏è –í–∑–ª–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω. –ñ–µ—Ä—Ç–≤–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞.",
        f"‚úÖ {target} —Ç–µ–ø–µ—Ä—å –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –í–∞—Å –∏ FemBoySpam."
    ]

    sent = await message.edit(f"üß† –ù–∞—á–∏–Ω–∞—é –≤–∑–ª–æ–º {target}...")
    for step in steps:
        await asyncio.sleep(random.uniform(0.7, 1.5))
        try:
            await sent.edit(step)
        except:
            break
        

        
    
@app.on_message(filters.command("whois", prefixes=".") & filters.me)
async def whois_cmd(client, message):
    if not message.reply_to_message:
        await message.edit("‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user = message.reply_to_message.from_user
    text = f"""
<b>üïµÔ∏è –ö—Ç–æ —ç—Ç–æ:</b>
–ò–º—è: {user.first_name}
–§–∞–º–∏–ª–∏—è: {user.last_name or '‚ùå'}
–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '‚ùå'}
ID: <code>{user.id}</code>
–ë–æ—Ç: {'‚úÖ' if user.is_bot else '‚ùå'}
"""
    await message.edit(text, parse_mode=ParseMode.HTML)
    
    
    
    
    
@app.on_message(filters.command("multiraid", prefixes=".") & filters.me)
async def multiraid_cmd(client, message):
    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        await message.edit("‚ùå –§–æ—Ä–º–∞—Ç: `.multiraid [–∫–æ–ª-–≤–æ] [–∑–∞–¥–µ—Ä–∂–∫–∞] [—Ñ—Ä–∞–∑–∞1;—Ñ—Ä–∞–∑–∞2;...]`")
        return

    try:
        count = int(args[1])
        delay = float(args[2])
        phrases = args[3].split(";")
    except:
        await message.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")
        return

    await message.delete()
    previous = await client.send_message(message.chat.id, random.choice(phrases))
    for i in range(1, count):
        await asyncio.sleep(delay)
        text = random.choice(phrases)
        try:
            previous = await client.send_message(
                message.chat.id,
                text,
                reply_to_message_id=previous.id
            )
        except Exception as e:
            await client.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break
            
            
@app.on_message(filters.command("glitch", prefixes=".") & filters.me)
async def glitch_text(client, message):
    if len(message.command) < 2:
        await message.edit("‚ùå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç")
        return

    text = " ".join(message.command[1:])
    glitchy = ''.join(c + random.choice(['Ã∑','Õü','Õ¢','Õú','Ã∏','Õû']) for c in text)
    await message.edit(f"üëæ {glitchy}")
    
    
    
    
@app.on_message(filters.command("roll", prefixes=".") & filters.me)
async def roll_cmd(client, message):
    number = random.randint(1, 6)
    await message.edit(f"üé≤ –í—ã–ø–∞–ª–æ: <b>{number}</b>", parse_mode=ParseMode.HTML)
    
   
    
      
@app.on_message(filters.command("nudescan", prefixes=".") & filters.me)
async def nude_scan(client, message):
    if len(message.command) < 2:
        await message.edit("‚ùå –§–æ—Ä–º–∞—Ç: `.nudescan @—é–∑–µ—Ä–Ω–µ–π–º`")
        return

    user = message.command[1]
    await message.edit(f"üîç –°–∫–∞–Ω–∏—Ä—É—é –ø–∞–º—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {user} –Ω–∞ –Ω–∞–ª–∏—á–∏–µ nudes...")
    await asyncio.sleep(2)
    await message.edit("üíæ –§–∞–π–ª—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: `nude1.png`, `cam2.mp4`, `leak.zip`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–æ–ª–∏—Ç–∏–∫–æ–π Telegram.")
    
   
    
      
@app.on_message(filters.command("ip", prefixes=".") & filters.me)
async def fake_ip_scan(client, message):
    if len(message.command) < 2:
        await message.edit("‚ùå –§–æ—Ä–º–∞—Ç: `.ip @—é–∑–µ—Ä–Ω–µ–π–º`")
        return

    username = message.command[1]
    fake_ip = ".".join(str(random.randint(1, 255)) for _ in range(4))
    await message.edit(f"üîç –°–∫–∞–Ω–∏—Ä—É—é IP {username}...")
    await asyncio.sleep(1.5)
    await message.edit(f"üì° IP-–∞–¥—Ä–µ—Å {username}: `{fake_ip}`\nüåê –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)")




@app.on_message(filters.command("lastseen", prefixes=".") & filters.me)
async def last_seen(client, message):
    if len(message.command) < 2:
        return await message.edit("‚ùå –£–∫–∞–∂–∏ @—é–∑–µ—Ä–Ω–µ–π–º")
    try:
        user = await client.get_users(message.command[1])
        if user.status and hasattr(user.status, 'was_online'):
            seen = user.status.was_online.strftime('%Y-%m-%d %H:%M:%S')
            await message.edit(f"üëÄ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤ —Å–µ—Ç–∏: <code>{seen}</code>", parse_mode=ParseMode.HTML)
        else:
            await message.edit("‚õî –°–∫—Ä—ã—Ç–æ –∏–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω")
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        
        
        
@app.on_message(filters.command("tagall", prefixes=".") & filters.me & filters.group)
async def tagall(client, message):
    text = ""
    async for member in client.get_chat_members(message.chat.id, limit=30):
        if member.user.is_bot:
            continue
        mention = f"@{member.user.username}" if member.user.username else f"<a href='tg://user?id={member.user.id}'>user</a>"
        text += mention + " "
    await message.reply(text, parse_mode=ParseMode.HTML)
    
    
    
    
@app.on_message(filters.command("menu", prefixes=".") & filters.me)
async def menu(client, message):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –°–æ–∑–¥–∞—Ç–µ–ª—å", url="kotenochek.t.me")],
        [InlineKeyboardButton("üî• –ö–∞–Ω–∞–ª", url="newxatafan4iik.t.me")],
        [InlineKeyboardButton("üòÇ –ú–µ–º", url="nope")]
    ])
    await message.reply("üìã –ú–µ–Ω—é:", reply_markup=keyboard)


HELP_TEXT = """
<b>üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ FemBoySpam:</b>
                    –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´
<code>.help</code> - –ü–æ–∫–∞–∑–∞—Ç—å –ö–æ–º–∞–Ω–¥—ã
<code>.join @username</code> - –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç
<code>.spam [–∫–æ–ª-–≤–æ] [–∑–∞–¥–µ—Ä–∂–∫–∞] [—Ç–µ–∫—Å—Ç]</code> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è N —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
<code>.stopspam</code> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º
<code>.broadcast</code> - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –¥–∏–∞–ª–æ–≥–∞–º
<code>.info</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
<code>.transfer [—é–∑–µ—Ä–Ω–µ–π–º] [–∫–æ–ª-–≤–æ]</code> - –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–º—É-—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—Ñ—Ç —Ç–æ—Ä—Ç–æ–≤


                    –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´
<code>.ping</code> - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø–∏–Ω–≥
<code>.whois</code> -  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
<code>.clean</code> - –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
<code>.glitch</code> - –ï–±–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
<code>.roll</code> - –ß–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6
<code>.menu</code> - –ú–µ–Ω—é
<code>.tagall</code> - –¢–µ–≥–Ω—É—Ç—å –≤—Å–µ—Ö xD
<code>.lastseen</code> - –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—Ö–æ–¥ —á–µ–ª–æ–≤


                    –ü–û–õ–ù–´–ô –ü–ò–ó... 
<code>.raid</code> - –°–ø–∞–º —Ä–µ–π–¥ üòà
<code>.hack</code> - –í–∑–ª–æ–º –ª–æ—à–∫–æ–≤üòà
<code>.multiraid</code> - –°–ø–∞–º –†–µ–π–¥ —Ä–∞–∑–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–ø—Ä–∏–º–µ—Ä: .multiraid 10 0.4 –∫–ª–æ—É–Ω;–∏–¥–∏ —Å–ø–∞—Ç—å;–ø—É–∫;–ª–æ–ª)üòà
<code>.ip</code> - –ü–æ–∏—Å–∫ –∞–π–ø–∏ –∞–¥—Ä–µ—Å–∞üòà
<code>.nudescan</code> - –ü–æ–∏—Å–∫ –Ω—é–¥—Å–æ–≤ üòà


                –°–ü–ê–ú –ü–û–î–ê–†–ö–ê–ú–ò
<code>.happy [—é–∑–µ—Ä–Ω–µ–π–º] [–∫–æ–ª-–≤–æ]</code> - üéâ
<code>.monkey [—é–∑–µ—Ä–Ω–µ–π–º] [–∫–æ–ª-–≤–æ]</code>- ü¶ß
<code>.love [—é–∑–µ—Ä–Ω–µ–π–º] [–∫–æ–ª-–≤–æ]</code>- ‚ù§Ô∏è
<code>.clown [—é–∑–µ—Ä–Ω–µ–π–º] [–∫–æ–ª-–≤–æ]</code>- ü§°
<code>.nongift</code> - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∞–º–∞

"""




@app.on_message(filters.command("help", prefixes=".") & filters.me)
async def help_cmd(client, message):
    await message.edit(HELP_TEXT, parse_mode=ParseMode.HTML)


app.run()